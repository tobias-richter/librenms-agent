; Note
;
; If a configured sensor does not appear in librenms, this may be due to a faulty configuration.
; After the configuration has been changed, it can be checked for possible errors using "rpigpiomonitor.php -validate".
;
; Any change to your configuration requires a manual rediscover of your device. Otherwise, your changes will only be visible once librenms performs an automatic rediscover.

; Sensor section
;
; Multiple use of the identical name can lead to overwriting of the state configuration of the first sensor with the same name when using states.
; This should therefore only be used once per configuration if possible. When using multiple Raspberry's, this can be used once per device because the serial number of the Raspberry is added to each sensor.
[sensorexample1]

; Sensor type
;
; This defines the sensor type.
; When reading a normal IO contact, the use of "state" is recommended.
; The following types are possible:
; airflow, ber, charge, chromatic_dispersion, cooling, count, current, dbm, delay, eer, fanspeed
; frequency, humidity, load, loss, power, power_consumed, power_factor, pressure, quality_factor
; runtime, signal, snr, state, temperature, tv_signal, voltage, waterflow, percent
type = state

; Sensor description
;
; This defines the sensor description which can be seen later in the respective device overview or in the graph.
description = Cabinet door

; Sensor limits
;
; This defines the limits from when the respective alarm should be triggered.
; Only numeric values are valid!
; If a certain alarm or even all of them should not be used, these values can be omitted or commented out.
;lowlimit = 0
;lowwarnlimit = 5
;warnlimit = 30
;highlimit = 35

; Sensor states
;
; This defines the sensor states to be used. If no sensor state is desired it can be omitted or commented out.
; A state sensor is configured in the following format:
; states.state_description.state_variable = state_value
; state_description should be replaced with the desired sensor state description which is displayed in librenms.
; state_variable should be replaced with the variable to be configured. The 2 variables "value" and "generic" must be configured for each state.
; The variable "value" specifies the value when the respective state is to be displayed.
; The variable "generic" can be used to define the background color of the respective state. 0 = green, 1 = orange, 2 = red.
; In the following example, the "Cabinet door" sensor will display "Open" in red for value 1 and "Closed" in green for value 0:
states.Open.value = 1
states.Open.generic = 2
states.Closed.value = 0
states.Closed.generic = 0

; GPIO readout of an IO contact
;
; This defines the respective GPIO PIN which is to be read out.
; With a pullup or pulldown circuit the state of a door contact can be determined.
; It is important that the pin numbering scheme of WiringPi is used!
io_gpio_pin = 21

; GPIO readout by external program
;
; This defines the external program to be used to read out the respective GPIO values.
; Hereby it is possible to read sensor modules like temperature sensors, air pressure sensors, humidity sensors etc..
; The program to be used must output a pure numerical value. If this is not the case, the value can be extracted from the output of the program using a helper script, for example.
;external_gpio_reader = /etc/snmp/tempreader.sh



;
; A few more example configurations
;

; Example configuration which reads an IO contact (pin 25) to determine whether the light of a technical cabinet is switched on or off.
[sensorexample2]
type = state
description = Cabinet lighting
states.Switched on.value = 1
states.Switched on.generic = 2
states.Switched off.value = 0
states.Switched off.generic = 0
io_gpio_pin = 25

; Example configuration which reads a temperature sensor
;[sensorexample3]
;type = temperature
;description = Cabinet temperature
;lowlimit = 0
;lowwarnlimit = 5
;warnlimit = 35
;highlimit = 40
;external_gpio_reader = /etc/snmp/tempreader.sh
